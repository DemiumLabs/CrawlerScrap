{
  "_from": "node-libcurl",
  "_id": "node-libcurl@1.3.3",
  "_inBundle": false,
  "_integrity": "sha512-8YqAm45I5piDHjjx2aXGBNB5cVM9dwmQZ2anAJ2JmCXVdCtvB6cZRB1MArU7e67wQLVt1+L/bw0SD4sZiyT08w==",
  "_location": "/node-libcurl",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-libcurl",
    "fetchSpec": "latest",
    "name": "node-libcurl",
    "raw": "node-libcurl",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-libcurl/-/node-libcurl-1.3.3.tgz",
  "_shasum": "0a2545813e4cfe288313335f94e8559700109eec",
  "_shrinkwrap": null,
  "_spec": "node-libcurl",
  "_where": "/home/david/Projects/cubicup/empresiteScrap",
  "author": {
    "email": "me@jonathancardoso.com",
    "name": "Jonathan Cardoso"
  },
  "binary": {
    "host": "https://github.com/JCMais/node-libcurl/releases/download",
    "module_name": "node_libcurl",
    "module_path": "./lib/binding/",
    "remote_path": "./v{version}/"
  },
  "bugs": {
    "url": "https://github.com/JCMais/node-libcurl/issues"
  },
  "bundleDependencies": [
    "node-pre-gyp"
  ],
  "dependencies": {
    "debug": "3.1.0",
    "fs-extra": "5.0.0",
    "nan": "2.10.0",
    "node-gyp": "3.8.0",
    "node-pre-gyp": "0.11.0",
    "npmlog": "4.1.2"
  },
  "deprecated": false,
  "description": "Node bindings for libcurl. Based on the work from node-curl.",
  "devDependencies": {
    "body-parser": "^1.18.3",
    "cookie-parser": "^1.4.3",
    "eslint": "^4.19.1",
    "express": "^4.16.3",
    "http-auth": "^3.2.3",
    "husky": "^0.15.0-rc.8",
    "ink-docstrap": "^1.3.2",
    "jsdoc": "^3.5.5",
    "jsdoc-to-markdown": "^4.0.1",
    "lint-staged": "^6.1.1",
    "mocha": "^5.2.0",
    "multiparty": "^4.2.0",
    "octonode": "^0.9.3",
    "prettier": "1.14.2",
    "progress": "^2.0.0",
    "should": "^13.2.3"
  },
  "engines": {
    "node": ">= 4"
  },
  "homepage": "https://github.com/JCMais/node-libcurl",
  "husky": {
    "hooks": {
      "commitmsg": "commitlint -e $GIT_PARAMS",
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "curl",
    "libcurl",
    "node-curl",
    "node-libcurl"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add",
      "yarn prettier"
    ]
  },
  "main": "./index.js",
  "name": "node-libcurl",
  "optionalDependencies": {},
  "readme": "# node-libcurl\n\n[![NPM version][npm-image]][npm-url]\n[![node][node-image]][node-url]\n[![license][license-image]][license-url]\n\n[![Travis CI Status][travis-image]][travis-url]\n[![AppVeyor CI Status][appveyor-image]][appveyor-url]\n[![Code Quality][codeclimate-image]][codeclimate-url]\n[![Dependencies][deps-image]][deps-url]\n\n[npm-image]:https://img.shields.io/npm/v/node-libcurl.svg?style=flat-square\n[npm-url]:https://www.npmjs.org/package/node-libcurl\n[travis-image]:https://img.shields.io/travis/JCMais/node-libcurl/master.svg?style=flat-square\n[travis-url]:https://travis-ci.org/JCMais/node-libcurl\n[appveyor-image]:https://ci.appveyor.com/api/projects/status/u7ox641jyb6hxrkt/branch/master?svg=true\n[appveyor-url]:https://ci.appveyor.com/project/JCMais/node-libcurl\n[codeclimate-image]:https://img.shields.io/codeclimate/github/JCMais/node-libcurl.svg?style=flat-square\n[codeclimate-url]:https://codeclimate.com/github/JCMais/node-libcurl\n[node-image]:https://img.shields.io/badge/node.js-%3E=_4-green.svg?style=flat-square\n[node-url]:https://nodejs.org/download/\n[license-image]:https://img.shields.io/github/license/JCMais/node-libcurl.svg?style=flat-square\n[license-url]:https://raw.githubusercontent.com/JCMais/node-libcurl/develop/LICENSE-MIT\n[deps-image]:https://img.shields.io/david/JCMais/node-libcurl.svg?style=flat-square\n[deps-url]:https://david-dm.org/jcmais/node-libcurl\n\n[Libcurl](https://github.com/bagder/curl) bindings for Node.js.\n_Based on the work from [jiangmiao/node-curl](https://github.com/jiangmiao/node-curl)._\n\n## Quick Start\n\n### Install\n```npm i node-libcurl --save```\nor\n```yarn add node-libcurl```\n\n### Simple Request\n```javascript\nvar Curl = require('node-libcurl').Curl;\n\nvar curl = new Curl();\n\ncurl.setOpt('URL', 'www.google.com');\ncurl.setOpt('FOLLOWLOCATION', true);\n\ncurl.on('end', function(statusCode, body, headers) {\n\n    console.info(statusCode);\n    console.info('---');\n    console.info(body.length);\n    console.info('---');\n    console.info(this.getInfo( 'TOTAL_TIME'));\n\n    this.close();\n});\n\ncurl.on('error', curl.close.bind(curl));\ncurl.perform();\n```\n\n### MultiPart Upload / HttpPost libcurl Option\n\n```javascript\nvar Curl = require('node-libcurl').Curl;\n\nvar curl = new Curl(),\n    close = curl.close.bind(curl);\n\ncurl.setOpt(curl.option.URL, '127.0.0.1/upload.php');\ncurl.setOpt(curl.option.HTTPPOST, [\n    { name: 'input-name', file: '/file/path', type: 'text/html' },\n    { name: 'input-name2', contents: 'field-contents' }\n]);\n\ncurl.on('end', close);\ncurl.on('error', close);\n```\n\nFor more examples check the [examples folder](examples).\n\n## API\n\nCheck the [API Docs](api.md)\n\nAlmost all [CURL options](https://curl.haxx.se/libcurl/c/curl_easy_setopt.html) are supported, if you pass one that is not, an error will be thrown.\n\n## Detailed Installation\n\nThe latest version of this package has prebuilt binaries (thanks to [node-pre-gyp](https://github.com/mapbox/node-pre-gyp/)) \n available for the latest two (2) versions of Node.js on Active LTS (or Maintenance LTS, see https://github.com/nodejs/Release) \n and for the following platforms:\n* Linux 64 bits\n* Mac OS X 64 bits\n* Windows 32 and 64 bits\n\nJust running ``npm install node-libcurl`` should install a prebuilt binary and no compilation will be needed.\n\nIf there is no prebuilt binary available that matches your system, or if the installation fails, then you will\nneed an environment capable of compilling nodejs addons, which means [python 2.7](https://www.python.org/download/releases/2.7)\ninstalled and an updated C++ compiler able to compile C++11.\n\nIf you don't want to use a prebuilt binary you can pass ``--build-from-source`` to the arguments list.\n\n### Linux\n\nThe only compiler supported on linux is gcc >=4.8, also you need to have the libcurl development files available,\nif you are running debian for example, you must install the ``libcurl4-openssl-dev`` package.\n\nIf you don't want to use the libcurl version shipped with your system, since it's probably very old\n(debian 7 uses libcurl 7.26 which is more than 3 years old, and had more than 1000 bugfixes already),\nyou can install libcurl from source, for the addon to use that libcurl version intead, you need to make sure that:\n \n1. ``curl-config`` tool is in the PATH,\n2. You have to setup LDFLAGS so that it poins to the correct directory where the curl lib files are:\n```sh\nexport LDFLAGS=\"-Wl,-rpath,${LIBCURL_PREFIX}/lib\";\n```\n\n### OS X\n\nYou need to have installed OS X >=10.8 and xcode >=4.5\n\n### Windows\n\nIf installing using a prebuilt binary you only need to have the [visual c++ 2015 runtime library](https://www.microsoft.com/en-us/download/details.aspx?id=40784).\nIf building from source, you need to have Python 2.7 and\n[Visual Studio >= 2015](http://www.visualstudio.com/downloads/download-visual-studio-vs), you can get all that by running:\n```sh\nnpm install --global --production windows-build-tools\n```\n\nCurrently there is no support to use other libcurl version than the one provided by the [curl-for-windows](https://github.com/JCMais/curl-for-windows) submodule.\n\n### nw.js (aka node-webkit)\n\nFrom nw.js documentation:\n\n> Starting from 0.13.0, native modules built by node-gyp or npm in upstream can be supported.\n>\n>  In Linux and OSX you can just load the native module directly. In windows youâ€™ll need to replace the file\n>  ``%APPDATA%\\npm\\node_modules\\node-gyp\\src\\win_delay_load_hook.c`` with the one at [https://github.com/nwjs/nw.js/blob/nw13/tools/win_delay_load_hook.c](https://github.com/nwjs/nw.js/blob/nw13/tools/win_delay_load_hook.c)\n\nhttp://docs.nwjs.io/en/latest/For%20Users/Advanced/Use%20Native%20Node%20Modules/\n\nSince we require ``node-gyp`` as direct dependency, you probably will need to change that\nfile directly in the ``node-gyp`` inside the ``node_modules`` folder of your project.\n\n### electron (aka atom-shell)\n\nCurrently there are no prebuilt binaries for electron, to install node-libcurl, do the following:\n\n ```sh\n npm install node-libcurl --runtime=electron --target=1.0.2 --disturl=https://atom.io/download/atom-shell --arch=x64 --save\n ```\n ``--target`` says you want to build for the electron version 0.34.1.\n\n ``--arch`` says the module should be built for 64bit.\n\n---\n\nYou can put those args in a .npmrc file, like so:\n```\nruntime = electron\ntarget = 1.0.2\ntarget_arch = x64\ndist_url = https://atom.io/download/atom-shell\n```\n\n## Contributing\n\nWe are using [`yarn`](https://yarnpkg.com/) on this project.\n\nIf on Windows, run:\n```sh\n$ node tools/update-deps.js\n```\nInstall the node modules:\n```sh\n$ yarn install\n```\nBuild node-libcurl:\n```sh\n$ yarn pregyp rebuild\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/JCMais/node-libcurl.git"
  },
  "scripts": {
    "docs": "jsdoc2md lib/*.js > api.md",
    "install": "node-pre-gyp install --fallback-to-build",
    "lint": "eslint . --max-warnings=0",
    "postinstall": "node scripts/postinstall",
    "pregyp": "node-pre-gyp",
    "prettier": "prettier --write --single-quote true --trailing-comma es5 --print-width 120",
    "prettier:all": "yarn prettier lib/**/*.js tools/**/*.js scripts/**/*.js test/**/*.js examples/**/*.js",
    "test": "mocha test --reporter spec --timeout 5000"
  },
  "version": "1.3.3"
}
